#!/usr/bin/env python
import sys, getopt

QUEENS_MODE = 0
QUEENS_MODE_NP1 = 1
QUEENS_MODE_GTN = 2
NO_THREE_IN_LINE_MODE = 3
NO_THREE_IN_LINE_MODE_2NP1 = 4
NO_THREE_IN_LINE_MODE_GT2N = 5

SEQ_ADDER_ENCODING = 0
PAR_ADDER_ENCODING = 1
ITE_ENCODING = 2

def usage():
  print "usage: queensbv [-h] [-s <size>] [-m <mode>] [-e <encoding>]"
  sys.exit(0)

def die(msg):
  assert msg != None
  print msg
  sys.exit(1)

def is_power_of_2 (x):
  assert x > 0
  return (x & (x - 1)) == 0

def next_power_of_2 (x):
  assert x > 0
  x -= 1
  i = 1
  while i < 32:
    x = x | (x >> i)
    i *= 2
  return x + 1

def log2 (x):
  result = 0
  assert x > 0
  assert is_power_of_2 (x)
  while x > 1:
    x >>= 1
    result += 1
  assert result >= 0
  return result

def board_field (x, y):
  assert x >= 0
  assert y >= 0
  return "board" + str(x) + "_" + str(y)

mode = QUEENS_MODE
encoding = SEQ_ADDER_ENCODING
size = 8
id = 1
constraints = [] 
num_bits_size = 0
num_bits_fields = 0

def add_seq (list, ext):
  global id

  assert list != None
  assert len (list) >= 2
  assert ext >= 0

  print "(let (?e" + str(id) + " (zero_extend[" + str(ext) + \
        "] " + list[0] + "))"
  last = "?e" + str(id)
  id += 1
  for i in range(1, len(list)):
    print "(let (?e" + str(id) + " (bvadd " + last + " (zero_extend[" + \
          str(ext) + "] " + list[i] + ")))"
    last = "?e" + str(id)
    id += 1
  return last, ext + 1

def add_par (list):
  global id
  bw = 1

  assert list != None
  assert len (list) >= 2

  while len(list) != 1:
    i = 0
    next = []
    while i < len(list):
      if i != len(list) - 1:
        print "(let (?e" + str(id) + " (bvadd (zero_extend[1] " + \
              list[i] + ") (zero_extend[1] " + list[i + 1] + ")))"
      else:
        print "(let (?e" + str(id) + " (zero_extend[1] " + list[i] + "))" 
      last = "?e" + str(id)
      next.append(last)
      id += 1
      i += 2
    list = next
    bw += 1
  return last, bw 

def ite_encode_eq_rec (list, pos, k):
  assert list != None
  assert pos >= 0

  if pos == len(list): 
    if k == 0:
      return "true"
    return "false"
  if len(list) - pos < k or k < 0:
    return "false"
  result = "(if_then_else (= " + list[pos] + " bv1[1]) "
  result += ite_encode_eq_rec (list, pos + 1, k - 1) + " "
  result += ite_encode_eq_rec (list, pos + 1, k) + ")"
  return result

def ite_encode_eq (list, k):
  global id

  assert list != None
  assert len(list) >= 2
  assert k > 0
  result = ite_encode_eq_rec (list, 0, k)
  sys.stdout.write("(flet ($e" + str(id) + " " + result +")\n")

def ite_encode_lt_rec (list, pos, counter, k):
  assert list != None
  assert pos >= 0
  assert counter >= 0

  if len(list) - pos + counter < k:
    return "true"
  if counter >= k:
    return "false"
  result = "(if_then_else (= " + list[pos] + " bv1[1]) "
  result += ite_encode_lt_rec (list, pos + 1, counter + 1, k) + " "
  result += ite_encode_lt_rec (list, pos + 1, counter, k) + ")"
  return result

def ite_encode_lt (list, k):
  global id

  assert list != None
  assert len(list) >= 2
  assert k > 0
  result = ite_encode_lt_rec (list, 0, 0, k)
  sys.stdout.write("(flet ($e" + str(id) + " " + result +")\n")

def ite_encode_ge (list, k):
  global id

  assert list != None
  assert len(list) >= 2
  assert k > 0
  result = ite_encode_lt_rec (list, 0, 0, k)
  sys.stdout.write("(flet ($e" + str(id) + " (not " + result +"))\n")


try:
  opts, args = getopt.getopt(sys.argv[1:], "hm:s:e:")
except getopt.GetoptError, err:
  print str(err)
  usage()

for o, a in opts:
  if o in ("-h"):
    usage()
  elif o in ("-m"):
    if a == "0":
      mode = QUEENS_MODE
    elif a == "1":
      mode = QUEENS_MODE_NP1
    elif a == "2":
      mode = QUEENS_MODE_GTN
    elif a == "3":
      mode = NO_THREE_IN_LINE_MODE 
    elif a == "4":
      mode = NO_THREE_IN_LINE_MODE_2NP1
    elif a == "5":
      mode = NO_THREE_IN_LINE_MODE_GT2N
    else:
      die ("mode must be >= 0 and <= 5")
  elif o in ("-e"):
    if a == "0":
      encoding = SEQ_ADDER_ENCODING
    elif a == "1":
      encoding = PAR_ADDER_ENCODING
    elif a == "2":
      encoding = ITE_ENCODING
    else:
      die ("encoding must be >= 0 and <= 1")
  elif o in ("-s"):
    size = int (a)
    if size < 4:
      die ("size must be >= 4")

num_bits_size = log2 (next_power_of_2 (size + 1))
num_bits_fields = log2 (next_power_of_2 (size * size + 1))

if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
   mode == NO_THREE_IN_LINE_MODE_GT2N:
  print "(benchmark queensNoThreeInLine" + str(size) + "x" + str(size) 
else:
  print "(benchmark queens" + str(size) + "x" + str(size)
print ":source {"
if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
   mode == NO_THREE_IN_LINE_MODE_GT2N:
  print "BV encoding of no three-in-line problem"
else:
  print "BV encoding of n-queens problem"
if mode == QUEENS_MODE:
  print "We try to place " + str(size) + \
        " queens on a " + str(size) + " x " + str(size) + " board"
elif mode == QUEENS_MODE_NP1: 
  print "We try to place n + 1 queens on an n x n board"
elif mode == QUEENS_MODE_GTN:
  print "We try to place m queens on an n x n board with m > n"
elif mode == NO_THREE_IN_LINE_MODE:
  print "We try to place " + str(2 * size) + \
        " queens on a " + str(size) + " x " + str(size) + " board"
elif mode == NO_THREE_IN_LINE_MODE_2NP1:
  print "We try to place " + str(2 * size + 1) + \
        " queens on a " + str(size) + " x " + str(size) + " board"
elif mode == NO_THREE_IN_LINE_MODE_GT2N:
  print "We try to place m queens on an n x n board with m > 2n"
print "Contributed by Robert Brummayer (robert.brummayer@gmail.com)"
print "}"
if mode == QUEENS_MODE:
  print ":status sat"
elif mode == NO_THREE_IN_LINE_MODE:
  print ":status unknown"
else:
  print ":status unsat"
print ":logic QF_BV"
for i in range(size):
  for j in range(size):
    print ":extrafuns ((" + board_field(i, j) + " BitVec[1]))"
print ":formula"

# generate row constraints 
for i in range(size):
  list = []
  for j in range(size):
    list.append(board_field(i, j)) 
  if encoding == ITE_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      ite_encode_eq (list, 2);
    else:
      ite_encode_eq (list, 1);
  else:
    if encoding == SEQ_ADDER_ENCODING:
      last, bw_adder = add_seq (list, num_bits_size - 1) 
    else: 
      assert encoding == PAR_ADDER_ENCODING
      last, bw_adder = add_par (list) 
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (= " + last + " bv2[" + \
            str(bw_adder) + "]))"
    else:
      print "(flet ($e" + str(id) + " (= " + last + " bv1[" + \
            str(bw_adder) + "]))"
  constraints.append ("$e" + str(id))
  id += 1

# generate col constraints 
for i in range(size):
  list = []
  for j in range(size):
    list.append(board_field(j, i))
  if encoding == ITE_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      ite_encode_eq (list, 2)
    else:
      ite_encode_eq (list, 1)
  else:
    if encoding == SEQ_ADDER_ENCODING:
      last, bw_adder = add_seq (list, num_bits_size - 1) 
    else:
      assert encoding == PAR_ADDER_ENCODING
      last, bw_adder = add_par (list) 
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (= " + last + " bv2[" + \
            str(bw_adder) + "]))"
    else:
      print "(flet ($e" + str(id) + " (= " + last + " bv1[" + \
            str(bw_adder) + "]))"
  constraints.append ("$e" + str(id))
  id += 1

#generate diagonal constraints
for i in range(1, size):
  list = []
  list.append (board_field(i, 0))
  row = i - 1
  col = 1
  assert row >= 0 and col < size 
  while row >= 0 and col < size:
    list.append(board_field(row, col))
    row -= 1
    col += 1
  if encoding == ITE_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      ite_encode_lt (list, 3)
    else:
      ite_encode_lt (list, 2)
  else:
    if encoding == SEQ_ADDER_ENCODING:
      last, bw_adder = add_seq (list, num_bits_size - 1)
    else:
      assert encoding == PAR_ADDER_ENCODING
      last, bw_adder = add_par (list)
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(bw_adder) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(bw_adder) + "]))"
  constraints.append ("$e" + str(id))
  id += 1

for i in range(1, size - 1):
  list = []
  list.append(board_field(size - 1, i))
  row = size - 1 - 1
  col = i + 1
  assert row >= 0 and col < size 
  while row >= 0 and col < size: 
    list.append(board_field(row, col))
    row -= 1
    col += 1
  if encoding == ITE_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      ite_encode_lt (list, 3)
    else:
      ite_encode_lt (list, 2)
  else:
    if encoding == SEQ_ADDER_ENCODING:
      last, bw_adder = add_seq (list, num_bits_size - 1)
    else:
      assert encoding == PAR_ADDER_ENCODING
      last, bw_adder = add_par (list)
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(bw_adder) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(bw_adder) + "]))"
  constraints.append ("$e" + str(id))
  id += 1

for i in range(1, size):
  list = []
  list.append (board_field(i, size - 1))
  row = i - 1
  col = size - 1 - 1
  assert row >= 0 and col >= 0 
  while row >= 0 and col >= 0:
    list.append (board_field(row, col))
    row -= 1
    col -= 1
  if encoding == ITE_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      ite_encode_lt (list, 3)
    else:
      ite_encode_lt (list, 2)
  else:
    if encoding == SEQ_ADDER_ENCODING:
      last, bw_adder = add_seq (list, num_bits_size - 1)
    else:
      assert encoding == PAR_ADDER_ENCODING
      last, bw_adder = add_par (list)
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(bw_adder) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(bw_adder) + "]))"
  constraints.append ("$e" + str(id))
  id += 1

for i in range(1, size - 1):
  list = []
  list.append (board_field(size - 1, size - 1 - i))
  row = size - 1 - 1
  col = size - 1 - i - 1 
  assert row >= 0 and col >= 0 
  while row >= 0 and col >= 0: 
    list.append (board_field(row, col))
    row -= 1
    col -= 1
  if encoding == ITE_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      ite_encode_lt (list, 3)
    else:
      ite_encode_lt (list, 2)
  else:
    if encoding == SEQ_ADDER_ENCODING:
      last, bw_adder = add_seq (list, num_bits_size - 1)
    else:
      assert encoding == PAR_ADDER_ENCODING
      last, bw_adder = add_par (list)
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(bw_adder) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(bw_adder) + "]))"
  constraints.append ("$e" + str(id))
  id += 1

# ITE encoding explodes for further constraints, switch to parallel encoding
if encoding == ITE_ENCODING:
  encoding = PAR_ADDER_ENCODING

# generate additional constraints
if mode == QUEENS_MODE_NP1 or mode == QUEENS_MODE_GTN or \
   mode ==  NO_THREE_IN_LINE_MODE_2NP1 or mode == NO_THREE_IN_LINE_MODE_GT2N:
  list = []
  for i in range(size):
    for j in range(size):
      list.append (board_field(i, j))
  if encoding == SEQ_ADDER_ENCODING:
    last, bw_adder = add_seq (list, num_bits_fields - 1)
  else:
    assert encoding == PAR_ADDER_ENCODING
    last, bw_adder = add_par (list)
  if mode == QUEENS_MODE_NP1:
    print "(flet ($e" + str(id) + " (= " + last + " bv" + str(size + 1) + \
           "[" + str(bw_adder) + "]))"
  elif mode == QUEENS_MODE_GTN:
    print "(flet ($e" + str(id) + " (bvugt " + last + " bv" + str(size) + \
           "[" + str(bw_adder) + "]))"
  elif mode == NO_THREE_IN_LINE_MODE_2NP1:
    print "(flet ($e" + str(id) + " (= " + last + " bv" + \
          str(2 * size + 1) + "[" + str(bw_adder) + "]))"
  else:
    assert mode == NO_THREE_IN_LINE_MODE_GT2N
    print "(flet ($e" + str(id) + " (bvugt " + last + " bv" + \
          str(2 * size) + "[" + str(bw_adder) + "]))"
  constraints.append ("$e" + str(id))
  id += 1

# combine all constraints by AND
assert len(constraints) >= 2
last = constraints[0]
for i in range(1, len(constraints)):
  print "(flet ($e" + str(id) + " (and " + last + " " + constraints[i] + "))" 
  last = "$e" + str(id)
  id += 1
print last
pars = ""
for i in range(id):
  pars = pars + ")"
print pars
