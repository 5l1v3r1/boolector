#!/usr/bin/env python
import sys, getopt

REGULAR_MODE = 0
PIGEON_HOLE_MODE_NP1 = 1
PIGEON_HOLE_MODE_GTN = 2
NO_THREE_IN_LINE_MODE = 3
NO_THREE_IN_LINE_MODE_2NP1 = 4
NO_THREE_IN_LINE_MODE_GT2N = 5

BV_ENCODING = 0
LIA_ENCODING = 1

def usage():
  print "usage: nqueens [-h] [-s <size>] [-m <mode>] [-l]"
  sys.exit(0)

def die(msg):
  assert msg != None
  print msg
  sys.exit(1)

def is_power_of_2 (x):
  assert x > 0
  return (x & (x - 1)) == 0

def next_power_of_2 (x):
  assert x > 0
  x -= 1
  i = 1
  while i < 32:
    x = x | (x >> i)
    i *= 2
  return x + 1

def log2 (x):
  result = 0
  assert x > 0
  assert is_power_of_2 (x)
  while x > 1:
    x >>= 1
    result += 1
  assert result >= 0
  return result

def board_field (x, y):
  assert x >= 0
  assert y >= 0
  return "board" + str(x) + "_" + str(y)

mode = REGULAR_MODE
encoding = BV_ENCODING
size = 8
id = 1
constraints = [] 

try:
  opts, args = getopt.getopt(sys.argv[1:], "hm:s:l")
except getopt.GetoptError, err:
  print str(err)
  usage()

for o, a in opts:
  if o in ("-h"):
    usage()
  elif o in ("-l"):
    encoding = LIA_ENCODING
  elif o in ("-m"):
    if a == "0":
      mode = REGULAR_MODE
    elif a == "1":
      mode = PIGEON_HOLE_MODE_NP1
    elif a == "2":
      mode = PIGEON_HOLE_MODE_GTN
    elif a == "3":
      mode = NO_THREE_IN_LINE_MODE 
    elif a == "4":
      mode = NO_THREE_IN_LINE_MODE_2NP1
    elif a == "5":
      mode = NO_THREE_IN_LINE_MODE_GT2N
    else:
      die ("mode must be >= 0 and <= 5")
  elif o in ("-s"):
    size = int (a)
    if size < 4:
      die ("size must be >= 4")

fields = size * size;
num_bits_size = log2 (next_power_of_2 (size + 1))
num_bits_fields = log2 (next_power_of_2 (fields + 1))

if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
   mode == NO_THREE_IN_LINE_MODE_GT2N:
  print "(benchmark queensNoThreeInLine" + str(size) + "x" + str(size) 
else:
  print "(benchmark queens" + str(size) + "x" + str(size)
print ":source {"
if encoding == BV_ENCODING:
  if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
     mode == NO_THREE_IN_LINE_MODE_GT2N:
    print "BV encoding of no three-in-line problem"
  else:
    print "BV encoding of n-queens problem"
else:
  assert encoding == LIA_ENCODING
  if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
     mode == NO_THREE_IN_LINE_MODE_GT2N:
    print "LIA encoding of no-three-in-line problem"
  else:
    print "LIA encoding of n-queens problem"
if mode == REGULAR_MODE:
  print "We try to place " + str(size) + \
        " queens on a " + str(size) + " x " + str(size) + " board"
elif mode == PIGEON_HOLE_MODE_NP1: 
  print "We try to place n + 1 queens on an n x n board"
elif mode == PIGEON_HOLE_MODE_GTN:
  print "We try to place m queens on an n x n board with m > n"
elif mode == NO_THREE_IN_LINE_MODE:
  print "We try to place " + str(2 * size) + \
        " queens on a " + str(size) + " x " + str(size) + " board"
elif mode == NO_THREE_IN_LINE_MODE_2NP1:
  print "We try to place " + str(2 * size + 1) + \
        " queens on a " + str(size) + " x " + str(size) + " board"
elif mode == NO_THREE_IN_LINE_MODE_GT2N:
  print "We try to place m queens on an n x n board with m > 2n"
print "Contributed by Robert Brummayer (robert.brummayer@gmail.com)"
print "}"
if mode == REGULAR_MODE:
  print ":status sat"
elif mode == NO_THREE_IN_LINE_MODE:
  print ":status unknown"
else:
  print ":status unsat"
if encoding == BV_ENCODING:
  var_type = "BitVec[1]"
  print ":logic QF_BV"
else:
  assert encoding == LIA_ENCODING
  var_type = "Int"
  print ":logic QF_LIA"
for i in range(size):
  for j in range(size):
    print ":extrafuns ((" + board_field(i, j) + " " + var_type + "))"
print ":formula"

# generate row constraints 
if encoding == BV_ENCODING:
  for i in range(size):
    print "(let (?e" + str(id) + " (zero_extend[" + str(num_bits_size - 1) + \
          "] " + board_field(i, 0) + "))"
    last = "?e" + str(id)
    id += 1
    for j in range(1, size):
      print "(let (?e" + str(id) + " (bvadd " + last + " (zero_extend[" + \
            str(num_bits_size - 1) + "] " + board_field(i, j) + ")))"
      last = "?e" + str(id)
      id += 1
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (= " + last + " bv2[" + \
            str(num_bits_size) + "]))"
    else:
      print "(flet ($e" + str(id) + " (= " + last + " bv1[" + \
            str(num_bits_size) + "]))"
    constraints.append ("$e" + str(id))
    id += 1
else:
  assert encoding == LIA_ENCODING
  for i in range(size):
    last = board_field(i, 0) 
    for j in range(1, size):
      print "(let (?e" + str(id) + " (+ " + last + " " + board_field(i,j) + "))"
      last = "?e" + str(id)
      id += 1
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (= " + last + " 2))"
    else:
      print "(flet ($e" + str(id) + " (= " + last + " 1))"
    constraints.append ("$e" + str(id))
    id += 1

# generate col constraints 
if encoding == BV_ENCODING:
  for i in range(size):
    print "(let (?e" + str(id) + " (zero_extend[" + str(num_bits_size - 1) + \
          "] " + board_field(0, i) + "))"
    last = "?e" + str(id)
    id += 1
    for j in range(1, size):
      print "(let (?e" + str(id) + " (bvadd " + last +  " (zero_extend[" + \
            str(num_bits_size - 1) + "] " + board_field(j, i) + ")))"
      last = "?e" + str(id)
      id += 1
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (= " + last + " bv2[" + \
            str(num_bits_size) + "]))"
    else:
      print "(flet ($e" + str(id) + " (= " + last + " bv1[" + \
            str(num_bits_size) + "]))"

    constraints.append ("$e" + str(id))
    id += 1
else:
  assert encoding == LIA_ENCODING
  for i in range(size):
    last = board_field(0, i) 
    for j in range(1, size):
      print "(let (?e" + str(id) + " (+ " + last + " " + board_field(j,i) + "))"
      last = "?e" + str(id)
      id += 1
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (= " + last + " 2))"
    else:
      print "(flet ($e" + str(id) + " (= " + last + " 1))"
    constraints.append ("$e" + str(id))
    id += 1

#generate diagonal constraints
for i in range(1, size):
  if encoding == BV_ENCODING:
    print "(let (?e" + str(id) + " (zero_extend[" + str(num_bits_size - 1) + \
          "] " + board_field(i, 0) + "))"
    last = "?e" + str(id)
    id += 1
  else:
    assert encoding == LIA_ENCODING
    last = board_field(i, 0)
  row = i - 1
  col = 1
  assert row >= 0 and col < size 
  while row >= 0 and col < size:
    if encoding == BV_ENCODING:
      print "(let (?e" + str(id) + " (bvadd " + last + " (zero_extend[" + \
            str(num_bits_size - 1) + "] " + board_field(row, col) + ")))"
    else:
      assert encoding == LIA_ENCODING
      print "(let (?e" + str(id) + " (+ " + last + " " + \
             board_field(row, col) + "))"
    last = "?e" + str(id)
    id += 1
    row -= 1
    col += 1
  if encoding == BV_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(num_bits_size) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(num_bits_size) + "]))"
  else:
    assert encoding == LIA_ENCODING
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (< " + last + " 3))"
    else:
      print "(flet ($e" + str(id) + " (<= " + last + " 1))"
  constraints.append ("$e" + str(id))
  id += 1

for i in range(1, size - 1):
  if encoding == BV_ENCODING:
    print "(let (?e" + str(id) + " (zero_extend[" + str(num_bits_size - 1) + \
          "] " + board_field(size - 1, i) + "))"
    last = "?e" + str(id)
    id += 1
  else:
    assert encoding == LIA_ENCODING
    last = board_field(size - 1, i)
  row = size - 1 - 1
  col = i + 1
  assert row >= 0 and col < size 
  while row >= 0 and col < size: 
    if encoding == BV_ENCODING:
      print "(let (?e" + str(id) + " (bvadd " + last + " (zero_extend[" + \
            str(num_bits_size - 1) + "] " + board_field(row, col) + ")))"
    else:
      assert encoding == LIA_ENCODING
      print "(let (?e" + str(id) + " (+ " + last + " " + \
            board_field(row, col) + "))"
    last = "?e" + str(id)
    id += 1
    row -= 1
    col += 1
  if encoding == BV_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(num_bits_size) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(num_bits_size) + "]))"
  else:
    assert encoding == LIA_ENCODING
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (< " + last + " 3))"
    else:
      print "(flet ($e" + str(id) + " (<= " + last + " 1))"
  constraints.append ("$e" + str(id))
  id += 1

for i in range(1, size):
  if encoding == BV_ENCODING:
    print "(let (?e" + str(id) + " (zero_extend[" + str(num_bits_size - 1) + \
          "] " + board_field(i, size - 1) + "))"
    last = "?e" + str(id)
    id += 1
  else:
    assert encoding == LIA_ENCODING
    last = board_field(i, size - 1)
  row = i - 1
  col = size - 1 - 1
  assert row >= 0 and col >= 0 
  while row >= 0 and col >= 0:
    if encoding == BV_ENCODING:
      print "(let (?e" + str(id) + " (bvadd " + last + " (zero_extend[" + \
            str(num_bits_size - 1) + "] " + board_field(row, col) + ")))"
    else:
      assert encoding == LIA_ENCODING
      print "(let (?e" + str(id) + " (+ " + last + " " + \
            board_field(row, col) + "))"
    last = "?e" + str(id)
    id += 1
    row -= 1
    col -= 1
  if encoding == BV_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(num_bits_size) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(num_bits_size) + "]))"
  else:
    assert encoding == LIA_ENCODING
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (< " + last + " 3))"
    else:
      print "(flet ($e" + str(id) + " (<= " + last + " 1))"
  constraints.append ("$e" + str(id))
  id += 1

for i in range(1, size - 1):
  if encoding == BV_ENCODING:
    print "(let (?e" + str(id) + " (zero_extend[" + str(num_bits_size - 1) + \
          "] " + board_field(size - 1, size - 1 - i) + "))"
    last = "?e" + str(id)
    id += 1
  else:
    assert encoding == LIA_ENCODING
    last = board_field(size - 1, size - 1 - i)
  row = size - 1 - 1
  col = size - 1 - i - 1 
  assert row >= 0 and col >= 0 
  while row >= 0 and col >= 0: 
    if encoding == BV_ENCODING:
      print "(let (?e" + str(id) + " (bvadd " + last + " (zero_extend[" + \
            str(num_bits_size - 1) + "] " + board_field(row, col) + ")))"
    else:
      assert encoding == LIA_ENCODING
      print "(let (?e" + str(id) + " (+ " + last + " " + \
            board_field(row, col) + "))"
    last = "?e" + str(id)
    id += 1
    row -= 1
    col -= 1
  if encoding == BV_ENCODING:
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (bvult " + last + " bv3[" + \
            str(num_bits_size) + "]))"
    else:
      print "(flet ($e" + str(id) + " (bvule " + last + " bv1[" + \
            str(num_bits_size) + "]))"
  else:
    assert encoding == LIA_ENCODING
    if mode == NO_THREE_IN_LINE_MODE or mode == NO_THREE_IN_LINE_MODE_2NP1 or \
       mode == NO_THREE_IN_LINE_MODE_GT2N:
      print "(flet ($e" + str(id) + " (< " + last + " 3))"
    else:
      print "(flet ($e" + str(id) + " (<= " + last + " 1))"

  constraints.append ("$e" + str(id))
  id += 1

# generate additional constraints
if mode == PIGEON_HOLE_MODE_NP1 or mode == PIGEON_HOLE_MODE_GTN or \
   mode ==  NO_THREE_IN_LINE_MODE_2NP1 or mode == NO_THREE_IN_LINE_MODE_GT2N:
  if encoding == BV_ENCODING:
    print "(let (?e" + str(id) + " bv0[" + str(num_bits_fields) + "])"
  else:
    assert encoding == LIA_ENCODING
    print "(let (?e" + str(id) + " 0)"
  zero = last = "?e" + str(id)
  id += 1
  for i in range(size):
    for j in range(size):
      if encoding == BV_ENCODING:
        print "(let (?e" + str(id) + " (bvadd " + last + " (zero_extend[" + \
              str(num_bits_fields - 1) + "] " + board_field(i, j) + ")))"
      else:
        assert encoding == LIA_ENCODING
        print "(let (?e" + str(id) + " (+ " + last + " " + \
              board_field(i, j) + "))"
      last = "?e" + str(id)
      id += 1
  if mode == PIGEON_HOLE_MODE_NP1:
    if encoding == BV_ENCODING:
      print "(flet ($e" + str(id) + " (= " + last + " bv" + str(size + 1) + \
             "[" + str(num_bits_fields) + "]))"
    else:
      assert encoding == LIA_ENCODING
      print "(flet ($e" + str(id) + " (= " + last + " " + str(size + 1) + "))"
  elif mode == PIGEON_HOLE_MODE_GTN:
    if encoding == BV_ENCODING:
      print "(flet ($e" + str(id) + " (bvugt " + last + " bv" + str(size) + \
             "[" + str(num_bits_fields) + "]))"
    else:
      assert encoding == LIA_ENCODING
      print "(flet ($e" + str(id) + " (> " + last + " " + str(size) + "))"
  elif mode == NO_THREE_IN_LINE_MODE_2NP1:
    if encoding == BV_ENCODING:
      print "(flet ($e" + str(id) + " (= " + last + " bv" + \
            str(2 * size + 1) + "[" + str(num_bits_fields) + \
            "]))"
    else:
      assert encoding == LIA_ENCODING
      print "(flet ($e" + str(id) + " (= " + last + " " + \
             str(2 * size + 1) + "))"
  else:
    assert mode == NO_THREE_IN_LINE_MODE_GT2N
    if encoding == BV_ENCODING:
      print "(flet ($e" + str(id) + " (bvugt " + last + " bv" + \
            str(2 * size) + "[" + str(num_bits_fields) + "]))"
    else:
      assert encoding == LIA_ENCODING
      print "(flet ($e" + str(id) + " (> " + last + " " + str(2 * size) + "))"
  constraints.append ("$e" + str(id))
  id += 1

# generate domain constraints for integer variables
if encoding == LIA_ENCODING:
  for i in range(size):
    for j in range(size):
      print "(flet ($e" + str(id) + " (or (= " + board_field(i, j) + \
             " 0) (= " + board_field(i, j) + " 1)))"
      constraints.append ("$e" + str(id))
      id += 1 


# combine all constraints by AND
assert len(constraints) >= 2
last = constraints[0]
for i in range(1, len(constraints)):
  print "(flet ($e" + str(id) + " (and " + last + " " + constraints[i] + "))" 
  last = "$e" + str(id)
  id += 1
print last
pars = ""
for i in range(id):
  pars = pars + ")"
print pars
