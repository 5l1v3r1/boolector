.SUFFIXES: .o .c .cc

MAKEFLAGS=-j $(if $(CORES),$(CORES),1)
CC=@CC@
INCS=-I. @INCS@
CFLAGS=@CFLAGS@
OBJS=@OBJS@
LIBS=@LIBS@
LDEPS=@LDEPS@
VERSION=$(shell cat VERSION)
SRCDIRS=. parser dumper
LIBOBJ=$(patsubst %.c,%.o,$(foreach d,$(SRCDIRS),$(wildcard $(d)/btor[a-z]*.c)))
LIBOBJ+=boolector.o $(OBJS)
SRC=$(foreach d,$(SRCDIRS),$(wildcard $(d)/*.[c|h|cc]))
TARGETS=boolector synthebtor deltabtor btorfmt.o btor2horn

all: libboolector.a $(TARGETS)

-include dependencies
-include test.mk
-include ibv.mk
-include mbt.mk
-include python.mk

%.o: %.c
	$(CC) $(CFLAGS) $(INCS) -c $< -o $@

%.o: %.cc
	$(CC) $(CFLAGS) $(INCS) -c $< -o $@

analyze:
	clang --analyze $(CFLAGS) $(INCS) $(shell ls *.c *.cc)

dependencies: btorconfig.h $(SRC) makefile
	rm -f $@; for srcdir in $(SRCDIRS); do \
	$(CC) $(CFLAGS) $(INCS) -MM $$srcdir/*.[ch] $$srcdir/*.cc 2>/dev/null | \
	sed -e 's,\(.*\):,'$$srcdir/'\1: makefile,' >>$@; done
boolector: boolectormain.o libboolector.a $(LDEPS)
	$(CC) $(CFLAGS) $(INCS) -o $@ boolectormain.o -L. -lboolector $(LIBS)

synthebtor: synthebtor.o libboolector.a $(LDEPS)
	$(CC) $(CFLAGS) $(INCS) -o $@ synthebtor.o -L. -lboolector $(LIBS)

deltabtor: deltabtor.c makefile $(LDEPS)
	$(CC) $(CFLAGS) $(INCS) -o $@ deltabtor.c

btor2horn: btor2horn.o btorfmt.o makefile
	$(CC) $(CFLAGS) $(INCS) -o $@ btor2horn.o btorfmt.o

libboolector.a: $(LIBOBJ)
	rm -f $@
	ar rc $@ $(LIBOBJ)
	ranlib $@

btorconfig.h: makefile VERSION mkconfig
	rm -f $@; ./mkconfig > $@

clean:
	rm -f $(TARGETS)
	rm -f dependencies makefile btorconfig.h
	rm -f *.gcda *.gcno *.gcov *.gch *.plist
	rm -f tests/*.gcda tests/*.gcno tests/*.gcov
	rm -f parser/*.gcda parser/*.gcno parser/*.gcov
	rm -f dumper/*.gcda dumper/*.gcno dumper/*.gcov
	rm -f log/*.log *.tmp
	rm -f *.a $(foreach d,$(SRCDIRS),$(d)/*.o)
	rm -f btormbt btoruntrace
	rm -rf build
	rm -f python.mk setup.py api/python/*.c *.so

.PHONY: all analyze clean
