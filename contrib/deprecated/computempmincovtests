#!/bin/bash

readonly filebasic="/tmp/computempmincovtestsbasic$$.tmp"
readonly fileformula="/tmp/computempmincovtestsformula$$.tmp"
readonly fileboolector="/tmp/computempmincovtestsboolector$$.tmp"
readonly covdir="covtests/"
readonly usage="./computempmincovtests [-a] [-d] [-x] [-p <num-processes>]"
readonly selected="${covdir}selected"

sleeptime=10
processes=`cat /proc/cpuinfo | grep processor | sort | tail -n 1 | awk '{ print $3 }'`
((processes++))

function cleanup
{
  killall minimizecovtests &> /dev/null
  rm -f "$fileformula"
  rm -f "$fileboolector"
  rm -f "$selected"
}

trap 'cleanup; exit 0' SIGHUP SIGINT SIGTERM

deltabtor=`which deltabtor`
if [[ -z "$deltabtor" ]]; then
  echo "*** computempmincovtests: can not find 'deltabtor'" 1>&2
  exit 1
fi

if [[ ! -e "$covdir" ]] || [[ ! -d "$covdir" ]] || [[ ! -r "$covdir" ]]; then
  echo "*** computempmincovtests: can not read coverage test directory" 1>&2
  exit 1
fi

add=0
while getopts "adxp:" o
do
  case "$o" in
  a)    add=1;;
  d)    dialog=dialog;;
  x)    dialog=Xdialog;;
  p)    processes=$OPTARG;;
  [?])  echo "$usage" 1>&2; exit 1;;
  esac
done

if [[ "$processes" -lt 1 ]]; then
  echo "number of processes must be positive"
  exit 1
fi

./gencovformula > "$fileformula"

if [[ $? -ne 0 ]]; then
  echo "Formula could not be generated"
  exit 1
fi

rm -f "$filebasic"

while read line
do
  op=`echo "$line" | awk '{ print $2 }'`
  if [[ "$op" = ulte ]]; then
    id=`echo "$line" | awk '{ print $1 }'`
    idsum=`echo "$line" | awk '{ print $4 }'`
    break
  else
    echo "$line" >> $filebasic
  fi
done < "$fileformula"

rm -f "$selected"

echo "found "`ls "$covdir"*.btor | wc -l`" tests"
echo "computing minimal number of tests" >&2
num=1
result=unsat
while [[ "$result" = unsat ]]
do
  echo "trying number of tests = $num" >&2
  cp $filebasic $fileformula
  echo "$id constd 32 $num" >> $fileformula
  echo "$((id + 1)) eq 1 $idsum $id" >> $fileformula
  echo "$((id + 2)) root 1 $((id + 1))" >> $fileformula
  boolector $fileformula -m 1> $fileboolector 2> /dev/null
  result=`head -n 1 $fileboolector`
  if [[ "$result" = sat ]]; then
    skipfirstline=1
    while read line
    do
      if [[ "$skipfirstline" -eq 1 ]]; then
        skipfirstline=0
      else
        if [[ `echo "$line" | awk '{ print $2 }'` -eq 1 ]]; then
          echo "$line" | awk '{ print $1 }' >> "$selected"
        fi
      fi
    done < "$fileboolector"
  else
    ((num++))
  fi
done

if [[ -n "$dialog" ]]; then
  pipecmd="$dialog --backtitle \"Minimizing $num coverage tests\" --gauge \"Progress\" 6 60 0"
  sleeptime=1
else
  pipecmd=cat
fi

for ((i = 1; i <= "$processes"; i++))
do
  ./minimizecovtests -i "$i" &
done

minimized=0
i=0
while [[ "$minimized" -lt "$num" ]]
do
  minimized=`ls ${covdir}*.red 2> /dev/null | wc -l`
  mintestspercentsbc=`echo "scale=2; ($minimized / $num) * 100" | bc`
  mintestspercents=`printf "%.0f" "$mintestspercentsbc"`
  if [[ -z "$dialog" ]]; then
    ((i++))
    echo "Minimized tests: $minimized (${mintestspercents}%)"
    if [[ "$i" -eq 6 ]]; then
      echo ""
      i=0
    fi
  else
    echo "$mintestspercents"
  fi
  sleep "$sleeptime" 
done | eval "$pipecmd"

if [[ "$add" -eq 1 ]]; then
  #compute test id
  maxline=`grep covtest ~/boolector/testcases | sort | tail -n 1`
  if [[ -n "$maxline" ]]; then
    maxcol=`echo "$maxline" | awk '{ print $1 }'`
    testid=${maxcol##covtest}
    ((testid++))
  else
    testid=1
  fi

  while read line
  do
    reducedfile="$covdir${line}.red"
    csfile="$covdir${line}.cs"
    cp $reducedfile ~/boolector/log/covtest$testid".btor"
    boolector -rwl 0 "$reducedfile" \
    1> ~/boolector/log/covtest$testid".out" 2> /dev/null
    testcasesline=covtest$testid" "`cat "$csfile"`" -o log/covtest$testid"".log log/covtest$testid"".btor"
    echo "$testcasesline" >> ~/boolector/testcases
    ((testid++))
  done < "$selected"
  echo "added $num tests" >&2
  cd ~/boolector/log
  git add -f covtest*.*
fi
cleanup
