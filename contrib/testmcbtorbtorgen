#!/bin/bash

# run testbtorbtorgen on multiple cores simultaneously

declare -a ids

readonly usage="*** testmcbtorbtorgen: usage: ./testmcbtorbtorgen [-c <limit>] [-d] [-x]" 
readonly covdir="./covtests/"
readonly cores=4
readonly filecovhashes="./testbtorbtorgenhashes"
readonly filecovlock="/var/lock/testmcbtorbtorgen$$lock"
cov=0
numerrors=0
sleeptime=10

function cleanup
{
  for ((i = 1; i <= "$cores"; i++))
  do
    if [[ -n "${ids[$i]}" ]]; then
      kill "${ids[$i]}" 2> /dev/null
    fi
  done
  sleep 1
  if [[ "$cov" -eq 1 ]]; then
    rm -f "$filecovhashes"
    rm -f "$filecovlock"
  fi
}

trap 'cleanup; exit 0' SIGHUP SIGINT SIGTERM

while getopts "c:dx" o
do
  case "$o" in
  c)	cov=1; covlimit=$OPTARG;;
  d)	dialog=dialog;;
  x)	dialog=Xdialog;;
  [?])	echo "$usage" 1>&2; exit 1;;
  esac
done

if [[ "$cov" -eq 1 ]]; then
  rm -r -f "$covdir"
  mkdir "$covdir"
  if [[ ! -e "$covdir" ]] || [[ ! -d "$covdir" ]] || \
     [[ ! -r "$covdir" ]] || [[ ! -w "$covdir" ]]; then
    echo "IO error"
    exit 1
  fi

  rm -f "$filecovhashes"
  touch "$filecovhashes"
fi

rm -f error*.btor

for ((i = 1; i <= "$cores"; i++))
do
  if [[ "$cov" -eq 1 ]]; then
    ./testbtorbtorgen -i "$i" -c "$covlimit" -n > /dev/null &
  else
    ./testbtorbtorgen -i "$i" > /dev/null &
  fi
  ids[$i]=$!
  sleep 1
done

if [[ -n "$dialog" ]]; then
  pipecmd="$dialog --backtitle \"Generating $covlimit coverage tests\" --gauge \"Progress\" 6 60 0"
  sleeptime=1
else
  pipecmd=cat
fi

i=0
numcovtests=0
while [[ "$numerrors" -lt "$cores" ]] && \
      ([[ "$cov" -eq 0 ]] || [[ "$numcovtests" -lt "$covlimit" ]])
do
  numerrors=`ls error*.btor 2> /dev/null | wc -l`
  if [[ -z "$dialog" ]]; then
    echo "Errors: $numerrors"
  fi
  if [[ "$cov" -eq 1 ]]; then
    numcovtests=`ls ${covdir}*.btor 2> /dev/null | wc -l`
    covtestspercents=`echo "scale=2; ($numcovtests / $covlimit) * 100" | bc`
    if [[ "$covtestspercents" = "100.00" ]]; then
      covtestspercents=100 
    else
      covtestspercents=${covtestspercents:0:2}
    fi
    if [[ -z "$dialog" ]]; then
      echo "Coverage tests: $numcovtests (${covtestspercents}%)"
    else
      echo "$covtestspercents"
    fi
  fi
  ((i++))
  if [[ -z "$dialog" ]] && [[ "$i" -eq 6 ]]; then
    echo ""
    i=0
  fi
  sleep "$sleeptime"
done | eval "$pipecmd"
cleanup
