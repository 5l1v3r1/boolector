#!/bin/bash

# ATTENTION: we use btorold2new filter as workaround

btorgen=unknown
for d in `echo $PATH | sed -e 's,:, ,g'` .
do
  file=$d/btorgen
  [ -d $d ] || continue
  [ -f $file ] || continue
  btorgen=$file
  break
done
if [[ $btorgen = unknown ]]; then
  echo "*** testbtorbtorgen: can not find 'btorgen'" 1>&2
  exit 1
fi

btorgenjava=unknown
for d in `echo $PATH | sed -e 's,:, ,g'` .
do
  file=$d/btorgenjava
  [ -d $d ] || continue
  [ -f $file ] || continue
  btorgenjava=$file
  break
done
if [[ $btorgenjava = unknown ]]; then
  echo "*** testbtorbtorgen: can not find 'btorgenjava'" 1>&2
  exit 1
fi

i=0
counter=0
valgrindcheck=100 # every nth testcase we perform a memory check with valgrind
file="/tmp/testbtorbtorgen$$.btor"
filedump="/tmp/testbtorbtorgendump$$.btor"
fileerror="./error.btor"
fileoutputmodel="/tmp/testbtorbtorgenoutputmodel$$.btor"
refinementlimit=100000
last=btorgenjava

if [[ $# -gt 1 ]]; then
  echo "*** testbtorbtorgen: usage: ./testbtorbtorgen [id]" 1>&2
  exit 1
fi

if [[ $# -eq 1 ]]; then
  fileerror="error"$1".btor"
fi

while true 
do 
  ((i++))
  ((counter++))
  rwl=rwl3

  randomnumber=$RANDOM
  ((randomnumber %= 2))
  if [[ $randomnumber -eq 0 ]]; then
    uamode=uag
  else
    uamode=ual
  fi

  randomnumber=$RANDOM
  ((randomnumber %= 2))
  if [[ $randomnumber -eq 0 ]]; then
    uabwref=uad
  else
    uabwref=uai
  fi

  randomnumber=$RANDOM
  ((randomnumber %= 3))
  if [[ $randomnumber -eq 0 ]]; then
    uaenc=uaz
  elif [[ $randomnumber -eq 1 ]]; then
    uaenc=uao
  else
    uaenc=uas
  fi

  uarwl=$RANDOM
  ((uarwl %= 4))

  checkmodel=$RANDOM
  ((checkmodel %= 2))

  if [ $last = btorgen ]; then
    btorgenjava 2> /dev/null | sed -e 's,nego,redxor,g' | btorold2new > $file 
    last=btorgenjava
  else
    btorgen 2> /dev/null | btorold2new > $file 
    last=btorgen
  fi

  if [ ! -s $file ]; then
    echo "*** testbtorbtorgen: generated file is empty"
    exit 1
  fi 

  echo -n "Test $i $rwl: "

  callstring="-$rwl -rl $refinementlimit $file"
  if [[ $uarwl -eq 3 ]]; then
    callstring=$callstring" -$uamode -$uabwref -$uaenc"
  fi
  if [[ $checkmodel -eq 1 ]]; then
    callstring=$callstring" -m"
    boolector $callstring > $fileoutputmodel
    goldenretval=$?
    head -n 1 $fileoutputmodel
  else
    boolector $callstring
    goldenretval=$?
  fi

  if [[ $goldenretval -ne 2 ]] && [[ $goldenretval -ne 3 ]]; then
    echo "ERROR"
    cp $file $fileerror
    echo "; error: $callstring" >> $fileerror
    exit
  fi

  if [[ $checkmodel -eq 1 ]] && [[ $goldenretval -eq 2 ]]; then
    btorcheckmodel $file $fileoutputmodel 
    retval=$?
    if [[ $retval -ne 0 ]]; then
      echo "ERROR"
      cp $file $fileerror
      cp $fileoutputmodel $fileerror".model"
      echo "; error: $callstring" >> $fileerror
      exit 1
    fi
  fi

  for rwl in 2 1 0
  do
    echo -n "Test $i rwl$rwl: "
    callstring="-rwl$rwl -rl $refinementlimit $file"
    if [[ $uarwl -eq $rwl ]]; then
      callstring=$callstring" -$uamode -$uabwref -$uaenc"
    fi
    if [[ $checkmodel -eq 1 ]]; then
      callstring=$callstring" -m"
      boolector $callstring > $fileoutputmodel
      retval=$?
      head -n 1 $fileoutputmodel
    else
      boolector $callstring
      retval=$?
    fi

    if [[ $retval -ne $goldenretval ]]; then
      echo "ERROR"
      cp $file $fileerror
      echo "; error: $callstring" >> $fileerror
      exit 1
    fi 
  done

  echo -n "Test $i dump: "
  boolector $file -de > $filedump 
  boolector -rl $refinementlimit $filedump
  retval=$?
  if [[ $retval -ne $goldenretval ]]; then
    echo "ERROR"
    cp $file $fileerror
    echo "; dump error" >> $fileerror
    exit 1
  fi 

  if [[ $checkmodel -eq 1 ]] && [[ $retval -eq 2 ]]; then
    btorcheckmodel $file $fileoutputmodel 
    retval=$?
    if [[ $retval -ne 0 ]]; then
      echo "ERROR"
      cp $file $fileerror
      cp $fileoutputmodel $fileerror".model"
      echo "; error: $callstring" >> $fileerror
      exit 1
    fi
  fi

  if [[ $counter -eq $valgrindcheck ]]; then
    counter=0
    echo -n "Test $i valg: "
    memerr=`valgrind -q ../boolector $file 2>&1 | grep ==`
    if [[ -n $memerr ]]; then
      echo ""
      echo "ERROR"
      cp $file $fileerror
      echo "; valgrind error" >> $fileerror
      exit 1
    fi 
    echo "OK"
  fi

  echo ""
done
