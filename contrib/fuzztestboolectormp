#!/bin/bash

# run multiple instances of fuzztestboolector simultaneously

startseconds=`date '+%s'`
declare -a ids

readonly usage="*** fuzztestboolectormp: usage: ./fuzztestboolectormp [-c <limit>] [-d] [-x] [-p <num-processes>]" 
readonly covdir="./covtests/"
readonly filecovhashes="./fuzztestboolectorhashes"
readonly filecovlock="/var/lock/fuzztestboolectormp$$lock"
readonly lockfile="lockfile"
readonly shmfile="/dev/shm/fuzztestboolector"
readonly update=10
cov=0
numerrors=0
sleeptime=10
processes=`cat /proc/cpuinfo | grep processor | sort | tail -n 1 | awk '{ print $3 }'`
((processes++))
# 2 processes per core
((processes *= 2))

function cleanup
{
  for ((i = 1; i <= "$processes"; i++))
  do
    if [[ -n "${ids[$i]}" ]]; then
      kill "${ids[$i]}" 2> /dev/null
    fi
  done
  sleep 1
  if [[ "$cov" -eq 1 ]]; then
    rm -f "$filecovhashes"
    rm -f "$filecovlock"
  fi
  rm -f $shmfile
  rm -f $lockfile
}

trap 'cleanup; if [[ `ls error*.btor 2> /dev/null | wc -l` -ne 0 ]]; then exit 1; fi; exit 0' SIGHUP SIGINT SIGTERM

while getopts "c:dxp:" o
do
  case "$o" in
  c)	cov=1; covlimit=$OPTARG;;
  d)	dialog=dialog;;
  x)	dialog=Xdialog;;
  p)    processes=$OPTARG;;
  [?])	echo "$usage" 1>&2; exit 1;;
  esac
done

if [[ "$processes" -lt 1 ]]; then
  echo "number of processes must be positive"
  exit 1
fi

if [[ "$cov" -eq 1 ]]; then
  rm -r -f "$covdir"
  mkdir "$covdir"
  if [[ ! -e "$covdir" ]] || [[ ! -d "$covdir" ]] || \
     [[ ! -r "$covdir" ]] || [[ ! -w "$covdir" ]]; then
    echo "IO error"
    exit 1
  fi

  rm -f "$filecovhashes"
  touch "$filecovhashes"
fi

rm -f error*.btor
rm -f $lockfile
echo 0 > $shmfile

for ((i = 1; i <= "$processes"; i++))
do
  if [[ "$cov" -eq 1 ]]; then
    ./fuzztestboolector -i "$i" -c "$covlimit" -r -n -s $update> /dev/null &
  else
    ./fuzztestboolector -i "$i" -r > /dev/null -s $update &
  fi
  ids[$i]=$!
  sleep 1
done

if [[ -n "$dialog" ]]; then
  pipecmd="$dialog --backtitle \"Generating $covlimit coverage tests\" --gauge \"Progress\" 6 60 0"
  sleeptime=1
else
  pipecmd=cat
fi

i=0
numcovtests=0
while [[ "$numerrors" -lt "$processes" ]] && \
      ([[ "$cov" -eq 0 ]] || [[ "$numcovtests" -lt "$covlimit" ]])
do
  numerrors=`ls error*.btor 2> /dev/null | wc -l`
  if [[ -z "$dialog" ]]; then
    echo "Errors: $numerrors"
  fi
  if [[ "$cov" -eq 1 ]]; then
    numcovtests=`ls ${covdir}*.btor 2> /dev/null | wc -l`
    covtestspercentsbc=`echo "scale=2; ($numcovtests / $covlimit) * 100" | bc`
    covtestspercents=`printf "%.0f" "$covtestspercentsbc"`
    if [[ -z "$dialog" ]]; then
      echo "Coverage tests: $numcovtests (${covtestspercents}%)"
    else
      echo "$covtestspercents"
    fi
  fi
  ((i++))
  if [[ -z "$dialog" ]] && [[ "$i" -eq 6 ]]; then
    currentseconds=`date '+%s'`
    ((delta = currentseconds - startseconds))
    ((ds = delta % 60 ))
    ((dm = (delta / 60) % 60))
    ((dh = delta / 3600))
    (
      flock -x 200
      res=`cat $shmfile`
      echo "Tested $res formulas in $dh hours $dm minutes and $ds seconds"
      fps=`echo "scale=2; $res / $delta" | bc`
      echo "Testing $fps formulas per second"
    )200>$lockfile
    i=0
  fi
  sleep "$sleeptime"
done | eval "$pipecmd"
cleanup
