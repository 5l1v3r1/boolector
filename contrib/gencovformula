#!/bin/bash

declare -a positions 
declare -a positionsfile 

id=1

readonly covdir="./covtests"
readonly file="/tmp/gencovformula$$.tmp"

if [[ ! -e "$covdir" ]] || [[ ! -d "$covdir" ]] || [[ ! -r "$covdir" ]] || \
   [[ ! -x "$covdir" ]]; then
  echo "IO error" 1>&2
  exit 1
fi

cd $covdir

cat *.err | sort | uniq > "$file"
numbits=`wc -l "$file" | awk '{ print $1 }'`

if [[ "$numbits" -lt 1 ]]; then
  echo "No coverage increment possible" >&2
  exit 1
fi

((max = 2 ** 32 - 1))
if [[ "$numbits" -gt "$max" ]]; then
  echo "Too many test positions" >&2
  exit 1
fi

i=0
while read line
do
  positions[$i]=$line
  ((i++))
done < "$file"

echo "$((id++)) zero $numbits"
((idzero = id - 1))
lastvector=$idzero

echo "$((id++)) zero 32"
((idsum = id - 1))

echo "$((id++)) ones $numbits"
((idones = id - 1))

echo "generating SMT formula "1>&2
for f in *.err
do
  echo "$((id++)) var 1 ${f%%".err"}"
  ((idvar = id - 1))

  echo "$((id++)) uext 32 $idvar 31"
  ((lastid = id - 1))

  echo "$((id++)) add 32 $lastid $idsum"
  ((idsum = id - 1))

  while read line
  do
    positionsfile[$line]="1"
  done < "$f"

  i=0
  bitstring=""
  while [[ "$i" -lt "$numbits" ]] 
  do
    line=${positions[$i]}
    if [[ -n "${positionsfile[$line]}" ]]; then
      bitstring=$bitstring"1"
      positionsfile[$line]=""
    else 
      bitstring=$bitstring"0"
    fi
    ((i++))
  done

  echo $((id++)) const $numbits $bitstring
  ((lastid = id - 1))
  echo "$((id++)) cond $numbits $idvar $lastid $idzero"
  ((lastid = id - 1))
  echo "$((id++)) or $numbits $lastvector $lastid"
  ((lastvector = id - 1))
done

echo "$((id++)) eq 1 $lastvector $idones"
((lastid = id - 1))
echo "$((id++)) root 1 $lastid"

echo "$((id++)) ones 32"
((idones32 = id - 1))
echo "$((id++)) ulte 1 $idsum $idones32"
((lastid = id - 1))
echo "$((id++)) root 1 $lastid"

exit 0
